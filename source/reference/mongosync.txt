.. _c2c-mongosync:

=============
``mongosync``
=============

.. include:: /includes/preview-warning

.. default-domain:: mongodb

.. program:: mongosync

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Description
-----------

The ``mongosync`` binary is the primary process used in
{+c2c-product-name+}. ``mongosync`` migrates data from one cluster to
another and can keep the clusters in continuous sync. 

This document provides a complete overview of the ``mongosync`` command
line options.

.. note::

   - Both the source cluster and destination cluster must use MongoDB
     6.0 or later.
   - ``mongosync`` supports replica sets and sharded clusters.
   - Standalone MongoDB instances are not supported. :ref:`Convert the
     standalone instance <server-replica-set-deploy-convert>` to a
     replica set before using {+c2c-product-name+}. 

Options
-------

Global Options
~~~~~~~~~~~~~~

.. option:: --cluster0 <URI>

   Sets the :ref:`connection URI <mongodb-uri>` for the first cluster.
   The first cluster can serve as either the source or the destination
   in the sync process. Designate the source and destination clusters
   in the call to the :ref:`c2c-api-start` API endpoint.

   For more information on connecting ``mongosync``, see
   :ref:`Connections <c2c-connecting>`.

.. option:: --cluster1 <URI>

   Sets the :ref:`connection URI <mongodb-uri>` for the second cluster.
   The second cluster can serve as either the source or the destination
   in the sync process. Designate the source and destination clusters
   in the call to the :ref:`c2c-api-start` API endpoint.

   For more information on connecting ``mongosync``, see
   :ref:`Connections <c2c-connecting>`.

.. option:: --verbosity <level>

   *Default*: ``INFO``

   Sets the verbosity level to use in log messages.
   {+c2c-product-name+} logs all messages at the specified level and
   any messages at lower levels.

   The ``--verbosity`` option supports the following values:

   - ``TRACE``
   - ``DEBUG``
   - ``INFO``
   - ``WARN``
   - ``ERROR``
   - ``FATAL``
   - ``PANIC``

.. option:: --logPath <DIR>

   Sets the path to the log directory. {+c2c-product-name+} writes logs
   to files in this directory.

.. option:: --port

   *Default*: ``27182``

   Sets the port used by the HTTP server for the {+c2c-product-name+}
   HTTP API.

.. option:: --id <ID>

   Sets an identifier for the ``mongosync`` instance.

   Use this option when running multiple instances of ``mongosync`` on
   a sharded cluster, to synchronize the shards individually. 
   
   The ``--id`` option must correspond to the shard ID of the shard it
   syncs.  To find the shard ID, use the :dbcommand:`listShards`
   command.

.. option:: --config <filename>

   Sets the path to the configuration file.

   For more information, see :ref:`c2c-mongosync-config`.

.. option:: --version, -v

   Prints ``mongosync`` version information to stdout.

.. option:: --help, h

   Prints usage information to stdout.

Behavior
--------

.. _c2c-mongosync-config:

Configuration File
~~~~~~~~~~~~~~~~~~

Options for ``mongosync`` can be set in a YAML configuration file. Use
the :option:`--config` option. To specify the path to the configuration
file. For example:

.. code-block:: yaml

   # Cluster Configuration
   cluster0: "mongodb://192.0.2.10:27017,192.0.2.11:27017,192.0.2.12:27017"
   cluster1: "mongodb://192.0.2.20:27017,192.0.2.21:27017,192.0.2.22:27017"

Consistency
~~~~~~~~~~~

``mongosync`` supports :term:`eventual consistency` on the destination
cluster. Read Consistency is not guaranteed on the destination cluster,
the source and destination clusters may differ at a given point in
time. However, if new writes are halted on the source cluster, the
source and destination clusters will eventually hold the same data. 

Individual writes may be reordered or combined as they are relayed from
source to destination. For a given document, the total number of writes
may differ between source and destination.

Transactions may appear non-atomically on the destination cluster.
Retryable writes may not be retryable on the destination cluster. 

Profiling
~~~~~~~~~

If profiling is enabled on a source database, MongoDB creates a special
collection named ``<db>.system.profile``. After synchronization is
complete, {+c2c-product-name+} will not drop the
``<db>.system.profile`` collection from the destination even if the
source database is dropped at a later time. The ``<db>.system.profile``
collection will not change the accuracy of user data on the
destination.

Views
~~~~~

If a database with views is dropped on the source, the destination may
show an empty ``system.views`` collection in that database. The empty
``system.views`` collection will not change the accuracy of user
data on the destination.

Examples
--------

#. Deploy a source and a destination cluster.

#. Initialize Cluster-to-Cluster Sync:

   .. code-block:: bash

      mongosync \
           --cluster0 'mongodb://192.0.2.10:27017,192.0.2.11:27017,192.0.2.12:27017' \
           --cluster1 'mongodb://192.0.2.20:27017,192.0.2.21:27017,192.0.2.22:27017'

   Use the appropriate connection strings for the :option:`--cluster0`
   and :option:`--cluster1` options so that they can connect to your
   replica sets.

#. To start the synchronization process, use an HTTP client such as
   cURL to send the ``start`` command to ``mongosync``:

   .. code-block:: bash

      curl localhost:27182/api/v1/start -X POST \
            --data '{ "source": "cluster0", "destination": "cluster1" }'

   Example Output:

   .. code-block:: json
      :copyable: false

      { "success": true }

