.. _c2c-mongosync:

=============
``mongosync``
=============

.. default-domain:: mongodb

.. program:: mongosync

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Description
-----------

The ``mongosync`` binary is the primary process used in
{+c2c-product-name+}. ``mongosync`` migrates data from one cluster to
another and can keep the clusters in continuous sync. 

This document provides a complete overview of the ``mongosync`` command
line options.

.. note::

   - Both the source cluster and destination cluster must use MongoDB
     6.0 or later. 
     
     You can migrate data on clusters (source) with versions of MongoDB
     lower than 6.0 to an Atlas cluster (destination). Migration from clusters with
     lower version requires additional preparation and configuration in
     the clusters with the lower version. `Contact
     <https://mongodb.com/contact>`__ your account team to inquire about 
     Professional Services.  

   - ``mongosync`` supports replica sets and sharded clusters.
   - Standalone MongoDB instances are not supported. :ref:`Convert the
     standalone instance <server-replica-set-deploy-convert>` to a
     replica set before using {+c2c-product-name+}. 
   - ``mongosync`` does not support Atlas shared clusters or serverless 
     instances. 
   - For a full list of limitations, see :ref:`Cluster-to-Cluster Sync
     Limitations<c2c-limitations>`. 

.. _c2c-cli-options:

Options
-------

.. |opt-term| replace:: option

Global Options
~~~~~~~~~~~~~~

.. option:: --cluster0 <URI>

   .. include:: /includes/opts/cluster0.rst

   To set the ``--cluster0`` option from a configuration file,
   see the :setting:`cluster0` setting.

.. option:: --cluster1 <URI>

   .. include:: /includes/opts/cluster1.rst

   To set the ``--cluster1`` option from a configuration file,
   see the :setting:`cluster1` setting.

.. option:: --config <filename>

   Sets the path to the configuration file.

   For more information, see :ref:`c2c-mongosync-config`.

.. option:: --disableTelemetry

   .. versionadded:: 1.4.0

   .. include:: /includes/opts/disableTelemetry

   To set the ``--disableTelemetry`` option from a configuration file,
   see the :setting:`disableTelemetry` setting.

   For more information, see :ref:`User Data Collection
   <c2c-telemetry>`.

.. option:: --help, -h

   Prints usage information to stdout.

.. option:: --id <ID>

   .. include:: /includes/opts/id.rst

   To set the ``--id`` option from a configuration file,
   see the :setting:`id` setting.

.. option:: --loadLevel <level>

   *Type*: integer

   .. include:: /includes/opts/loadLevel.rst

   To set the ``--loadLevel`` option from a configuration file, see the
   :setting:`loadLevel` setting.

   .. include:: /includes/opts/loadlevel-warning.rst
   
.. option:: --logPath <DIR>

   .. include:: /includes/opts/logPath.rst

   To set the ``--logPath`` option from a configuration file,
   see the :setting:`logPath` setting.

   .. note:: 

      .. include:: /includes/fact-log-rotation-usr1-signal

.. option:: --port

   .. include:: /includes/opts/port.rst

   To set the ``--port`` option from a configuration file,
   see the :setting:`port` setting.

.. option:: --verbosity <level>

   .. |verbosity-opt-type| replace:: option
   .. |verbosity-opt| replace:: ``--verbosity``

   .. include:: /includes/opts/verbosity.rst

   To set the ``--verbosity`` option from a configuration file,
   see the :setting:`verbosity` setting.
   
.. option:: --version, -v

   Prints ``mongosync`` version information to stdout.

Behavior
--------

.. _c2c-mongosync-config:

Cluster Independence
~~~~~~~~~~~~~~~~~~~~

``mongosync`` syncs collection data between a source cluster and
destination cluster. ``mongosync`` does not synchronize :ref:`users
<users>` or :ref:`roles <built-in-roles>`. As a result, you can create
users with different access permissions on each cluster.

Configuration File
~~~~~~~~~~~~~~~~~~

Options for ``mongosync`` can be set in a YAML configuration file. Use
the :option:`--config` option. For example:

.. code-block:: console

   $ mongosync --config /etc/mongosync.conf

For information on available settings, see :ref:`Configuration <c2c-config>`.


Consistency
~~~~~~~~~~~

``mongosync`` supports :term:`eventual consistency` on the destination
cluster. Read Consistency is not guaranteed on the destination cluster,
the source and destination clusters may differ at a given point in
time. However, if new writes are halted on the source cluster, the
source and destination clusters will eventually hold the same data.

Individual writes may be reordered or combined as they are relayed from
source to destination. For a given document, the total number of writes
may differ between source and destination.

Transactions may appear non-atomically on the destination cluster.
Retryable writes may not be retryable on the destination cluster.

Profiling
~~~~~~~~~

If profiling is enabled on a source database, MongoDB creates a special
collection named ``<db>.system.profile``. After synchronization is
complete, {+c2c-product-name+} will not drop the
``<db>.system.profile`` collection from the destination even if the
source database is dropped at a later time. The ``<db>.system.profile``
collection will not change the accuracy of user data on the
destination.

Sharded Clusters
~~~~~~~~~~~~~~~~

{+c2c-product-name+} supports replication between sharded clusters.
Individual shards are replicated in parallel from the source cluster to
the destination cluster, however a :ref:`chunk migration
<sharding-chunk-migration>` or similar source update could move
documents to a new source shard during replication.

Even if documents move between source shards during replication,
{+c2c-product-name+} maintains the :term:`eventual consistency`
guarantee on the destination cluster.

Data Definition Language (DDL) Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using DDL operations (operations that act on collections or databases
such as :method:`db.createCollection()` and :method:`db.dropDatabase()`)
during sync increase the risk of migration failure and may negatively
impact ``mongosync`` performance. For best performance, refrain from
performing DDL operations on the source cluster while the sync is in
progress.

For more information on DDL operations, see
:ref:`txn-prod-considerations-ddl`. 

Views
~~~~~

If a database with views is dropped on the source, the destination may
show an empty ``system.views`` collection in that database. The empty
``system.views`` collection will not change the accuracy of user
data on the destination.

.. _c2c-write-blocking:

Write Blocking
~~~~~~~~~~~~~~

.. include:: /includes/fact-write-blocking-enable.rst

You must enable write-blocking when you start ``mongosync`` if you want
to use :ref:`reverse synchronization <c2c-api-reverse>` later.

User Permissions
````````````````

.. include:: /includes/fact-write-blocking-requirement.rst

Permissible Reads
`````````````````

.. include:: /includes/fact-read-operations-source.rst

.. include:: /includes/fact-read-operations-check.rst

Permissible Writes
``````````````````

.. include:: /includes/fact-write-blocking-check.rst

.. include:: /includes/fact-write-blocking-when.rst

Commit
~~~~~~

To stop syncing, use the :ref:`commit <c2c-api-commit>` command on the
destination cluster to convert indexes and finalize the changes. If you
enable :ref:`write-blocking <c2c-write-blocking>`:


- ``commit`` blocks writes on the source cluster. 
- ``commit`` blocks writes on the destination cluster until
  ``mongosync`` begins index validation.


To monitor the ``commit`` process, use the :ref:`progress
<c2c-api-progress>` command:

- The destination cluster is writable when ``canWrite`` is true.
- Index conversion is complete when ``mongosync`` enters the
  ``COMMITTED`` state.

Read and Write Concern
~~~~~~~~~~~~~~~~~~~~~~

By default, ``mongosync`` sets the read concern level to
:readconcern:`"majority"` for reads on the source cluster. For writes on
the destination cluster, ``mongosync`` sets the write concern level to
:writeconcern:`"majority"` with :ref:`j: true <wc-j>`. 

For more information on read and write concern configuration and
behavior, see :ref:`read-concern` and :ref:`write-concern`. 

Read Preference
~~~~~~~~~~~~~~~

``mongosync`` requires the :readmode:`primary` read preference
when connecting to the source cluster. For more information, see
:ref:`connections-read-preference`. 

.. _c2c-capped-collections:

Capped Collections
~~~~~~~~~~~~~~~~~~

.. include:: /includes/collections/behavior-capped-collections.rst

.. _c2c-system-collections:

System Collections
~~~~~~~~~~~~~~~~~~

.. include:: /includes/collections/behavior-system-collections.rst

Resilience
~~~~~~~~~~

``mongosync`` is resilient and able to handle non-fatal errors. Logs
that contain the word "error" or "failure" do not indicate that
``mongosync`` is failing or corrupting data. For example, if a network
error occurs, the ``mongosync`` log may contain the word "error' but
``mongosync`` is still able to complete the sync. In the case that a
sync does not complete, ``mongosync`` writes a fatal log entry. 

UUIDs
~~~~~

``mongosync`` creates collections with new :abbr:`UUIDs (universally
unique identifiers)` on the destination cluster. There is no
relationship between UUIDs on the source cluster and the destination
cluster. If applications contain hard-coded UUIDs (which MongoDB does
not recommend), you may need to update those applications before they
work properly with the migrated cluster. 

Sorting
~~~~~~~

``mongosync`` inserts documents on the destination cluster in an
undefined order which does not preserve natural sort order from the
source cluster. If applications depend on document order but don't have
a defined sort method, you may need to update those applications to
specify the expected sort order before the applications work properly
with the migrated cluster. 

Multiple Clusters
~~~~~~~~~~~~~~~~~

To sync a source cluster to multiple destination clusters, use one
``mongosync`` instance for each destination cluster. For more
information, see :ref:`Multiple Clusters Limitations
<multiple-clusters-limitations>`. 

.. _c2c-mongosync-examples:

Examples
--------

#. Deploy a source and a destination cluster.

#. Initialize Cluster-to-Cluster Sync:

   .. code-block:: bash

      mongosync \
           --cluster0 "mongodb://192.0.2.10:27017,192.0.2.11:27017,192.0.2.12:27017" \
           --cluster1 "mongodb://192.0.2.20:27017,192.0.2.21:27017,192.0.2.22:27017"

   Use the appropriate connection strings for the :option:`--cluster0`
   and :option:`--cluster1` options so that they can connect to your
   replica sets.

#. To start the synchronization process, use an HTTP client such as
   cURL to send the ``start`` command to ``mongosync``:

   .. code-block:: bash

      curl localhost:27182/api/v1/start -X POST \
            --data '{ "source": "cluster0", "destination": "cluster1" }'

   Example Output:

   .. code-block:: json
      :copyable: false

      { "success": true }

