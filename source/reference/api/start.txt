.. _c2c-api-start:

=========
``start``
=========


.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Description
-----------

Starts the synchronization between a source and destination cluster.

Requirements
------------

State
~~~~~

To use the ``start`` endpoint, ``mongosync`` must be in the ``IDLE``
state.

User Write Blocking
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-write-blocking-requirement.rst

To set a custom role for the ``mongosync`` user:
 
#. To create a custom role, use the :dbcommand:`createRole` command:

   .. code-block:: javascript
   
      db.adminCommand( {
         createRole: "reverseSync",
         privileges: [ {
             resource: { db: "", collection: "" },
             actions: [ "setUserWriteBlockMode", "bypassWriteBlockingMode" ]
         } ],
         roles: []
      } )
 
#. To grant the custom role to the ``mongosync`` user, use the :dbcommand:`grantRolesToUser` command:

   .. code-block:: javascript

      db.adminCommand( {
         grantRolesToUser: "mongosync-user",
         roles: [ { role: "reverseSync", db: "admin" } ]
      } )

Ensure that you use this configured ``mongosync`` user in the connection 
strings for the :setting:`cluster0` or :setting:`cluster1` settings when
you start ``mongosync``. 

Request
-------

.. code-block:: http
   :copyable: false

   POST /api/v1/start 

Request Body Parameters
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 13 13 54

   * - Parameter
     - Type
     - Necessity
     - Description

   * - ``source``
     - string
     - Required
     - Name of the source cluster.
    
   * - ``destination``
     - string
     - Required
     - Name of the destination cluster.

   * - ``reversible``
     - boolean
     - Optional
     - If set to ``true``, enables the synchronization operation to be
       reversed. For more information, see the :ref:`reverse
       <c2c-api-reverse>` endpoint.
       
       Default value is ``false``.

   * - ``enableUserWriteBlocking``
     - boolean
     - Optional
     - If set to ``true``, blocks writes on the destination cluster
       while the synchronization is in progress. After the
       synchronization is committed to the destination cluster, the
       original source cluster blocks writes and the destination cluster
       accepts writes.

       Default value is ``false``.

   * - ``includeNamespaces``
     - array
     - Optional
     - Filters the databases or collections to sync. The filter document
       syntax is: 

       .. code-block: javascript

          {
             "database": "databaseOne",    // required
             "collections": [              // optional
                "collectionOne",
                "collectionTwo"
             ]
          }

       If you configure a filter on a source cluster that has multiple
       databases, ``mongosync`` only syncs the databases specified in
       the filter definition. ``mongosync`` will not sync the other
       existing databases.
       
       If you want to modify the filter to add a newly created database,
       you have to :ref:`restart the filtered sync <c2c-change-filter>`
       from the beginning.

       For more details, see: :ref:`c2c-collection-filtering`.
       
       For current limitations, see: :ref:`c2c-filtering-limitations`.

Response
--------

.. include:: /includes/api/tables/basic-response.rst

Example: Start a Sync Job
-------------------------

.. include:: /includes/intro-start-api-example-intro.rst

Request
~~~~~~~

.. literalinclude:: /includes/api/requests/start.sh
   :language: shell

Response
~~~~~~~~

.. literalinclude:: /includes/api/responses/success.json
   :language: json
   :copyable: false

Example: Start a Reversible Sync Job
------------------------------------

.. include:: /includes/intro-start-api-example-intro.rst

The ``reversible`` and ``enableUserWriteBlocking`` fields allow the sync
to be reversed. To reverse the sync direction, see :ref:`reverse
<c2c-api-reverse>`.

Request
~~~~~~~

.. literalinclude:: /includes/api/requests/start-reversible.sh
   :language: shell

Response
~~~~~~~~

.. literalinclude:: /includes/api/responses/success.json
   :language: json
   :copyable: false

Example: Start a Filtered Sync Job
----------------------------------

.. include:: /includes/intro-start-api-example-intro.rst

The ``includeNamespaces`` array defines a filter on two databases,
``sales`` and ``marketing``. The ``sales`` database filters on the
``EMEA`` and ``APAC`` collections. 

With this filter in place, ``mongosync``:

- syncs all of the collections in the ``marketing`` database
- syncs the ``EMEA`` and ``APAC`` collections from the ``sales``
  database
- ignores any other databases that are in the cluster

Request
~~~~~~~

.. literalinclude:: /includes/api/requests/start-filtered.sh
   :language: shell

Response
~~~~~~~~

.. literalinclude:: /includes/api/responses/success.json
   :language: json
   :copyable: false

Behavior
--------

If the ``start`` request is successful, ``mongosync`` enters the
``RUNNING`` state.
