.. _c2c-failure-recovery:

=======================================
Use ``mongosync`` for Disaster Recovery 
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Setting up {+c2c-product-name+} to prepare for disaster recovery follows the 
same procedure as other :ref:`connections <c2c-connecting>` between clusters.
Synchronization keeps the destination cluster up to date with the source
cluster using :term:`eventual consistency`. This means that until the migration 
commits, the destination cluster might represent a stale and inconsistent 
version of the source cluster. If the source cluster fails or becomes otherwise 
unavailable, the destination cluster can replace it as the primary cluster if 
your application can tolerate potentially stale data.

:ref:`mongosync <c2c-mongosync>` temporarily alters some collection 
characteristics during synchronization. The original values are restored during 
the :ref:`commit process <c2c-api-commit>`. If synchronization ends prematurely,
you must manually reset these collection characteristics on the destination
cluster before you can use it as the primary cluster.

To prepare the destination cluster to replace the source cluster, make
the following changes that mimic the sync finalization process of the
``commit`` endpoint. 

.. list-table::
   :header-rows: 1

   * - Change
     - Description
   * - :ref:`Unique Indexes <c2c-dr-unique>`
     - Unique indexes on the source cluster synchronize as non-unique indexes 
       on the destination cluster.

       Indexes that should be unique must be manually set to unique. 
   * - :ref:`TTL Indexes <c2c-dr-ttl>`
     - Synchronization sets ``expireAfterSeconds`` to the value of ``MAX_INT``
       on the destination cluster.

       Use the :dbcommand:`collMod` command to set ``expireAfterSeconds`` 
       to the desired value.
   * - :ref:`Hidden Indexes <c2c-dr-hidden>`
     - Synchronization replicates hidden indexes as non-hidden.

       Use the :dbcommand:`collMod` command to hide any indexes that should
       be hidden.
   * - :ref:`Write Blocking <c2c-dr-write-blocking>`
     - If you enable write-blocking, ``mongosync`` blocks writes: 
       
       - On the destination cluster during sync.
       - On the source cluster when ``commit`` is received.

       If synchronization was started with write blocking, disable the Write
       Block Mode.
   * - :ref:`Capped Collections <c2c-dr-capped-collections>`
     - Synchronization sets capped collections to the maximum allowable
       size. To set your required maximum size, use the
       :dbcommand:`collMod` command.
   * - Dummy Indexes 
     - In some cases, synchronization may create dummy indexes on the 
       destination to support writes on sharded or collated collections. 

       Use the :dbcommand:`dropIndexes` command to drop any dummy indexes. Each 
       dummy index's name contains the word ``dummy``.


.. _c2c-dr-unique:

Unique Indexes
--------------

``mongosync`` replicates writes in parallel, which 
can cause transient uniqueness violations on the destination cluster. To avoid
these errors, unique indexes are replicated as non-unique. If
synchronization ends early, manually resolve any uniqueness violations
and convert any non-unique indexes that should be unique into unique indexes.

Prepare the Index for Conversion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For each non-unique index on the destination cluster that should be
unique, run :dbcommand:`collMod` with ``prepareUnique`` set to
``true``.

After running ``collMod``, the index rejects any new writes that
would introduce duplicate keys.

Resolve Uniqueness Violations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There may still be uniqueness conflicts in the index after you run
``prepareUnique``. To find conflicts and convert the index to a unique
index, run ``collMod`` with ``unique`` set to ``true`` on each of the
non-unique indexes that you want to set as unique.

If the call to ``collMod`` succeeds, there are no uniqueness violations
on that index and the index is converted to an unique index.

If the call to ``collMod`` fails with a ``CannotConvertIndexToUnique``
error, correct the uniqueness violations and rerun ``collMod``.

See: `Convert an Existing Index
<https://www.mongodb.com/docs/v6.0/reference/command/collMod/#convert-an-existing-index-to-a-unique-index>`__

.. _c2c-dr-ttl:

TTL Indexes
-----------

During synchronization, ``expireAfterSeconds`` is set
to ``MAX_INT`` for :ref:`TTL indexes
<index-feature-ttl>`. To reset ``expireAfterSeconds``, use the
:dbcommand:`collMod` command to change the expiration value. 


.. _c2c-dr-hidden:

Hidden Indexes
--------------
During synchronization, :ref:`hidden indexes <index-type-hidden>` are
not hidden on the destination cluster. Use the ``collMod`` command to
hide indexes that should be hidden.

.. _c2c-dr-write-blocking:

Write blocking
--------------

When write blocking is enabled as part of the :ref:`/start
<c2c-api-start>` command, ``mongosync`` blocks user writes on the
destination cluster during replication. If replication ends
prematurely, you must manually unblock writing on the destination.

After writing is enabled, you can redirect writes from your client
application to the destination cluster.

To enable writes, update :dbcommand:`setUserWriteBlockMode`:

.. code-block:: javascript

   db.adminCommand(
       {
           setUserWriteBlockMode: 1,
           global: false
       }
   )

.. _c2c-dr-capped-collections:

Capped Collections
------------------

During synchronization, capped collections are set to the maximum
allowable size. To set your required maximum size, use the ``collMod``
command. For details, see :ref:`resize-capped-collection`.

.. example:: 

   .. code-block:: javascript
      :emphasize-lines: 3

      db.runCommand( {
        collMod: "<collection_name>",
        cappedSize: <max_size_in_bytes>,
        cappedMax: <max_number_of_documents_in_collection>
      } )
