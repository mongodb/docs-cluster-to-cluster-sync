.. _c2c-filter-regex:

##############################
Regular Expressions in Filters
##############################

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. versionadded:: 1.6

.. include:: /includes/api/facts/filter-regex

Syntax
======

To match databases and collections for ``mongosync`` to use :ref:`c2c-filtered-sync`,
you can use regular expressions:

.. code-block:: json
   :copyable: false

   {
      "databaseRegex": {
         "pattern": "<string>",
         "options": "<string>"
      },
      "collectionsRegex": {
         "pattern": "<string>",
         "options": "<string>"
      }
   }

The regular expression pattern you pass into a filter must follow the :query:`regex <$regex>` syntax supported by the MongoDB server.

Regular expressions in filter documents use ``options`` listed in the :query:`regex
<$regex>` guide. ``options`` is a string of concatenated options. For example, to specify
the ``i`` and ``s`` options, pass in "si" to ``options``. The order of concatenated
options does not matter.

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Option
     - Description

   * - ``i``
     - Case insensitivity to match upper and lower cases. For an
       example, see :ref:`regex-case-insensitive`.

   * - ``m``

     - For patterns that include anchors (i.e. ``^`` for the start,
       ``$`` for the end), match at the beginning or end of each
       line for strings with multiline values. Without this option,
       these anchors match at beginning or end of the string. For an
       example, see :ref:`regex-multiline-match`.

       If the pattern contains no anchors or if the string value has
       no newline characters (e.g. ``\n``), the ``m`` option has no
       effect.

   * - ``x``

     - "Extended" capability to ignore all white space characters in
       the ``$regex`` pattern unless escaped or included in a
       character class.

       Additionally, it ignores characters in-between and including
       an un-escaped hash/pound (``#``) character and the next new
       line, so that you may include comments in complicated
       patterns. This only applies to data characters; white space
       characters may never appear within special character
       sequences in a pattern.

       The ``x`` option does not affect the handling of the VT
       character (i.e. code 11).

   * - ``s``

     - Allows the dot character (i.e. ``.``) to match all
       characters *including* newline characters. For an example,
       see :ref:`regex-dot-new-line`.

   * - ``u``

     -  Supports Unicode. This flag is accepted, but is redundant. UTF is set by 
        default in the ``$regex`` operator, making the ``u`` option 
        unnecessary. 

Regular expressions in filter documents use the following fields:

.. list-table::
   :header-rows: 1

   * - Option
     - Type
     - Description

   * - ``collectionsRegex``
     - document
     - Specifies which collections you want the filter
       to match.

   * - ``collectionsRegex.options``
     - string
     - Regular expression options to use in the match.
       
   * - ``collectionsRegex.pattern``
     - string
     - Regular expression pattern to match.


   * - ``databaseRegex``
     - document
     - Specifies which databases you want the filter 
       to match.

   * - ``databaseRegex.options``
     - string
     - Regular expression options to use in the match.

   * - ``databaseRegex.pattern``
     - string
     - Regular expression pattern to match.

These options are available to use with both the ``includeNamespaces``
and ``excludeNamespaces`` parameters.

Use Cases
=========

Regular expressions allow you match multiple databases or collections with a
single pattern.  If you want to match multiple similarly named 
databases or collections, a regular expression may be easier to match than
creating a series of filters for individual databases or groups of collections.

Details
=======

Regular Expression Options Example
----------------------------------

``databaseRegex`` and ``collectionsRegex`` each supports an ``options`` field,
which you can use to configure regular expression options.
Internally, ``mongosync`` passes the filter and options to the
:query:`$regex` operator. Options available to that operator can be used
with Filtred Sync.

For example, this filter would match collections in the ``sales`` database
that begin with the ``accounts_`` string. The filter also specifies the option ``m`` to
match characters at the beginning or end of each line for strings with multiline values, and the
option ``s`` to allow the dot character to match all characters including newline
characters.

.. code-block:: json

   "includeNamespaces": [
      {
         "database": "sales",
         "collectionsRegex": {
            "pattern": "^accounts_.+?$",
            "options": "ms"
         }
      }
   ]

Learn More
==========

* :ref:`c2c-filtered-sync`
